MasterDirtyList. 


Main module;
  Set clk to dirty
  Main->simulate(Context=null)
  set inputs to dirty
  Main->simulate(Context=null)


//context is a vector representing the context
Module->simulate(vector<inst*> context,instance* dirty_inst)
  create new clean modulesim. every wire is X.
  create new empty dirty_wire_list
  dirty all the wires in modulesim corresponding to wires in dirty_inst
    and add wires to dirty stack
  create new empty dirty_instance_list
  Check MasterDirtyList what instances are dirty. Add to dirty_instance_list

  while(dirty_wire_list is not empty) {
    pop off wire.
    if is output
      set connected inputs values.
      if value changed,
      
    
  }





Easy simulate.
  Set Clk to dirty
  Main->simulate(Context)
  set inputs to dirty (if changed)
  main->simulate(context)

instance->simulate(vector<inst*> context)
  //Assume all wires are already set.
  create new empty dirty_wire_list
  dirty all the wires in modulesim corresponding to wires in dirty_inst
    and add wires to dirty stack
  create new empty dirty_instance_list
  if there are any dirty wires within the instances of this scope, add those instances to dirty_instance_list

  while(dirty_wire_list and dirty_inst list are not empty) {
    while(dirty_wire_list is not empty) {
      pop dirty_wire
      if output
        Set value and Add all connected inputs to dirty wire list (if they have changed)
      if input
        if instance then add instance to dirty_instance_list
        if interface, then do nothing
    }
    if(dirty_inst_list not empty)
      pop instance from dirty_instance_list
      instance->simulate()
      add any output from the instances to dirty_wire_list
    }
  }
  if any interface outputs are dirty



